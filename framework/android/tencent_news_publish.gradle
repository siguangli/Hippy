apply plugin: 'maven-publish'

ext {
  def propFile = file('local.properties')
  if (propFile.exists()) {
    propFile.with {
      Properties p = new Properties()
      it.withReader('UTF-8') { p.load(it) }
      MAVEN_USER = p.get('maven_username')
      MAVEN_PWD = p.get('maven_password')
    }
  } else {
    MAVEN_USER = System.getenv("MAVEN_USERNAME")
    MAVEN_PWD = System.getenv("MAVEN_PASSWORD")
  }
}

println("=======MAVEN_USER=" + MAVEN_USER + ", MAVEN_PWD=" + MAVEN_PWD)

publishing {
  repositories {
    maven {
      def snapshotsRepoUrl = "https://mirrors.tencent.com/repository/maven/tencent_public_snapshots"
      def releasesRepoUrl = url = "https://mirrors.tencent.com/repository/maven/tencent_public"
      url = VERSION_NAME.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

      credentials {
        //修改为自己的账号密码，可在mirrors.tencent.com上查询密码
        username "zealotchen"
        password "632862880bc711eca8a26c92bf5e3645"
      }
    }
  }

  publications {
    QQLiveHippy(MavenPublication) {
      artifact("$buildDir/outputs/aar/android-sdk.aar")
      groupId PUBLISH_GROUP_ID
      artifactId PUBLISH_ARTIFACT_ID
      version VERSION_NAME

      pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')
        // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
        configurations.implementation.allDependencies.each {
          // Ensure dependencies such as fileTree are not included in the pom.
          if (it.name != 'unspecified') {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
          }
        }
      }
    }
  }
}
